from flask import Flask
import requests
import os
import time
import logging
from telethon import TelegramClient

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger()

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
API_ID = os.getenv('TELEGRAM_API_ID')
API_HASH = os.getenv('TELEGRAM_API_HASH')
TARGET_BOT = '@gardenstockbot'

async def check_stock():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–∫ —É –±–æ—Ç–∞"""
    try:
        client = TelegramClient('session', API_ID, API_HASH)
        await client.start()
        
        bot = await client.get_entity(TARGET_BOT)
        
        async with client.conversation(bot) as conv:
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–°—Ç–æ–∫"
            await conv.send_message('üå± –°—Ç–æ–∫')
            response = await conv.get_response()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            stock_text = response.text
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω —Å—Ç–æ–∫")
            
            # –ò—â–µ–º –ü–æ–º–∏–¥–æ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ —Å–µ–º–µ–Ω–∞ (–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú)
            if "üå± –°–µ–º–µ–Ω–∞:" in stock_text:
                seeds_section = stock_text.split("üå± –°–µ–º–µ–Ω–∞:")[1].split("ü•ö –Ø–π—Ü–∞:")[0]
                if "–ü–æ–º–∏–¥–æ—Ä" in seeds_section:
                    return True, stock_text
                    
        await client.disconnect()
        return False, stock_text
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False, None

def send_telegram(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
    try:
        requests.post(url, data=data)
        logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")

def stock_monitor():
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ @gardenstockbot...")
    send_telegram("üîç –¢–ï–°–¢: –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–æ–∫–∞ –Ω–∞ –ü–æ–º–∏–¥–æ—Ä –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É!")
    
    import asyncio
    last_found = False
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–∫
            found, stock_info = asyncio.run(check_stock())
            
            if found and not last_found:
                logger.info("üçÖ –ü–û–ú–ò–î–û–† –ù–ê–ô–î–ï–ù! (—Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω)")
                send_telegram("üçÖ üçÖ üçÖ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù! –ü–û–ú–ò–î–û–† –í –ü–†–û–î–ê–ñ–ï! üçÖ üçÖ üçÖ")
                send_telegram("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ Great Pumpkin")
                last_found = True
            elif not found:
                last_found = False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            
        time.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞

@app.route('/')
def home():
    return "üçÖ –¢–ï–°–¢: –ú–æ–Ω–∏—Ç–æ—Ä—é @gardenstockbot –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ü–æ–º–∏–¥–æ—Ä–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"

# –ó–∞–ø—É—Å–∫–∞–µ–º
import threading
logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä...")
monitor_thread = threading.Thread(target=stock_monitor)
monitor_thread.daemon = True
monitor_thread.start()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
