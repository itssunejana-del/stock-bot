from flask import Flask
import requests
import os
import time
import logging
import threading
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
DISCORD_CHANNEL_ID = os.getenv('DISCORD_CHANNEL_ID')

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
message_versions = {}
last_notification_time = None
CHECK_INTERVAL = 10  # —Å–µ–∫—É–Ω–¥

def send_telegram(text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram: {e}")
        return False

def self_ping():
    """–°–∞–º–æ-–ø–∏–Ω–≥ —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª"""
    try:
        requests.get(f"https://stock-bot-cj4s.onrender.com/", timeout=5)
    except:
        pass

def get_message_content(message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    content = message.get('content', '')
    embeds = message.get('embeds', [])
    
    all_text = content
    
    for embed in embeds:
        all_text += f" {embed.get('title', '')}"
        all_text += f" {embed.get('description', '')}"
        all_text += f" {embed.get('footer', {}).get('text', '')}"
        
        for field in embed.get('fields', []):
            all_text += f" {field.get('name', '')}"
            all_text += f" {field.get('value', '')}"
    
    return all_text

def check_for_seeds_changes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –í—É–ª–∫–∞–Ω–∞"""
    global message_versions, last_notification_time
    
    try:
        url = f"https://discord.com/api/v10/channels/{DISCORD_CHANNEL_ID}/messages?limit=20"
        headers = {"Authorization": f"Bot {DISCORD_TOKEN}"}
        
        response = requests.get(url, headers=headers, timeout=15)
        
        if response.status_code == 200:
            messages = response.json()
            found_changes = []
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
            
            for message in messages:
                message_id = message['id']
                author = message.get('author', {}).get('username', '')
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –í—É–ª–∫–∞–Ω–∞
                if 'Vulcan' not in author:
                    continue
                
                current_content = get_message_content(message)
                
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                if message_id not in message_versions:
                    message_versions[message_id] = current_content
                    logger.info(f"üìù –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –í—É–ª–∫–∞–Ω–∞: {message_id}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                previous_content = message_versions[message_id]
                if current_content != previous_content:
                    logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message_id}!")
                    message_versions[message_id] = current_content
                    
                    # –ò—â–µ–º —Å–µ–º–µ–Ω–∞ –≤ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    seeds_found = analyze_seeds_in_text(current_content)
                    if seeds_found:
                        found_changes.extend(seeds_found)
                        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω—ã —Å–µ–º–µ–Ω–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {seeds_found}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            if found_changes:
                current_time = datetime.utcnow()
                
                # –ö—É–ª–¥–∞—É–Ω 4.5 –º–∏–Ω—É—Ç—ã
                if last_notification_time:
                    time_passed = current_time - last_notification_time
                    if time_passed.total_seconds() < 270:
                        logger.info("‚è≥ –ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                        return False
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                for seed in found_changes:
                    send_telegram(f"{seed} –≤ —Å—Ç–æ–∫–µ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)")
                
                last_notification_time = current_time
                return True
            
            return False
            
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Discord API: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
        return False

def analyze_seeds_in_text(text):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–µ–º—è–Ω"""
    seeds_found = []
    
    # –°–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞
    seed_patterns = [
        ('Tomato', '–¢–æ–º–∞—Ç'),
        ('Bamboo', '–ë–∞–º–±—É–∫'),
        ('Great Pumpkin', '–í–µ–ª–∏–∫–∞—è –¢—ã–∫–≤–∞'),
        ('Romanesco', '–†–æ–º–∞–Ω–µ—Å–∫–æ'),
        ('Crimson Thorn', '–ë–∞–≥—Ä–æ–≤–∞—è –ö–æ–ª—é—á–∫–∞'),
        ('Carrot', '–ú–æ—Ä–∫–æ–≤—å'),
        ('Strawberry', '–ö–ª—É–±–Ω–∏–∫–∞'),
        ('SEEDS STOCK', '–°—Ç–æ–∫ —Å–µ–º—è–Ω')
    ]
    
    for eng_name, rus_name in seed_patterns:
        if eng_name in text:
            seeds_found.append(rus_name)
            logger.info(f"üå± –û–±–Ω–∞—Ä—É–∂–µ–Ω {rus_name} –≤ —Ç–µ–∫—Å—Ç–µ")
    
    return seeds_found

def cleanup_old_messages():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏"""
    global message_versions
    if len(message_versions) > 50:
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 30 —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        all_ids = list(message_versions.keys())
        if len(all_ids) > 30:
            ids_to_remove = all_ids[:-30]
            for msg_id in ids_to_remove:
                del message_versions[msg_id]
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(ids_to_remove)} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

@app.route('/')
def home():
    return "üçÖ –ú–æ–Ω–∏—Ç–æ—Ä—é –ò–ó–ú–ï–ù–ï–ù–ò–Ø —Å–æ–æ–±—â–µ–Ω–∏–π –í—É–ª–∫–∞–Ω–∞..."

@app.route('/status')
def status():
    return f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—é {len(message_versions)} —Å–æ–æ–±—â–µ–Ω–∏–π –í—É–ª–∫–∞–Ω–∞"

@app.route('/reset')
def reset():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global message_versions
    message_versions = {}
    return "‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω–∞! –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."

def uptime_monitor():
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º"""
    while True:
        self_ping()
        time.sleep(600)

def discord_monitor():
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    logger.info("üîÑ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô –°–û–û–ë–©–ï–ù–ò–ô –í–£–õ–ö–ê–ù–ê")
    
    while True:
        try:
            changes_found = check_for_seeds_changes()
            
            if changes_found:
                logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            else:
                logger.info("üîç –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
            cleanup_old_messages()
            time.sleep(CHECK_INTERVAL)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(30)

if __name__ == '__main__':
    logger.info("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô")
    
    threading.Thread(target=discord_monitor, daemon=True).start()
    threading.Thread(target=uptime_monitor, daemon=True).start()
    
    app.run(host='0.0.0.0', port=5000)
