from flask import Flask
import requests
import os
import time
import logging
import threading
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
DISCORD_CHANNEL_ID = os.getenv('DISCORD_CHANNEL_ID')

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã
last_processed_messages = set()
last_notification_time = None
MAX_MESSAGE_AGE = 900  # 15 –º–∏–Ω—É—Ç
MESSAGE_LIMIT = 200

def send_telegram(text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ö–û–†–û–¢–ö–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram")
            return False
    except:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return False

def self_ping():
    """–°–∞–º–æ-–ø–∏–Ω–≥ —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª"""
    try:
        requests.get(f"https://stock-bot-cj4s.onrender.com/", timeout=5)
    except:
        pass

def cleanup_old_messages():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏"""
    global last_processed_messages
    if len(last_processed_messages) > 1000:
        last_processed_messages = set(list(last_processed_messages)[-500:])
        logger.info("üßπ –û—á–∏—Å—Ç–∏–ª —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

def check_discord_messages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç"""
    global last_processed_messages, last_notification_time
    
    try:
        url = f"https://discord.com/api/v10/channels/{DISCORD_CHANNEL_ID}/messages?limit={MESSAGE_LIMIT}"
        headers = {"Authorization": f"Bot {DISCORD_TOKEN}"}
        
        response = requests.get(url, headers=headers, timeout=15)
        
        if response.status_code == 200:
            messages = response.json()
            current_time = datetime.now()
            found_plants = []
            
            # –°–ø–∏—Å–æ–∫ —Å–µ–º—è–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            plants_to_monitor = [
                # –¢–µ–∫—É—â–∏–µ
                'Tomato', ':Tomato:',
                'Bamboo', ':Bamboo:',
                # –ù–æ–≤—ã–µ —Ä–µ–¥–∫–∏–µ —Å–µ–º–µ–Ω–∞
                'Great Pumpkin', ':GreatPumpkin:',
                'Romanesco', ':Romanesco:',
                'Crimson Thorn', ':CrimsonThorn:',
            ]
            
            for message in messages:
                message_id = message['id']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
                message_time = datetime.fromisoformat(message['timestamp'].replace('Z', '+00:00'))
                time_diff = (current_time - message_time).total_seconds()
                
                if time_diff > MAX_MESSAGE_AGE:
                    continue
                
                if message_id in last_processed_messages:
                    continue
                
                last_processed_messages.add(message_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–±–∞–¥—ã
                embeds = message.get('embeds', [])
                for embed in embeds:
                    all_embed_text = ""
                    
                    for field in embed.get('fields', []):
                        all_embed_text += f" {field.get('name', '')} {field.get('value', '')}"
                    
                    all_embed_text += f" {embed.get('description', '')} {embed.get('title', '')}"
                    
                    # –ò—â–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
                    for plant in plants_to_monitor:
                        if plant in all_embed_text:
                            plant_name = clean_plant_name(plant)
                            if plant_name not in found_plants:
                                found_plants.append(plant_name)
                                logger.info(f"üéØ –ù–ê–ô–î–ï–ù–û: {plant_name}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if found_plants:
                current_time = datetime.now()
                
                # –ö—É–ª–¥–∞—É–Ω 4.5 –º–∏–Ω—É—Ç—ã
                if last_notification_time:
                    time_passed = current_time - last_notification_time
                    if time_passed.total_seconds() < 270:
                        logger.info("‚è≥ –ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        return False
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
                for plant in found_plants:
                    send_telegram(f"{plant} –≤ —Å—Ç–æ–∫–µ")
                
                last_notification_time = current_time
                return True
            
            return False
            
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Discord API: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False

def clean_plant_name(plant):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    clean_name = plant.replace(':', '')
    
    # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    name_mapping = {
        'Tomato': '–¢–æ–º–∞—Ç',
        'Bamboo': '–ë–∞–º–±—É–∫',
        'Great Pumpkin': '–í–µ–ª–∏–∫–∞—è –¢—ã–∫–≤–∞',
        'Romanesco': '–†–æ–º–∞–Ω–µ—Å–∫–æ',
        'Crimson Thorn': '–ë–∞–≥—Ä–æ–≤–∞—è –ö–æ–ª—é—á–∫–∞'
    }
    
    return name_mapping.get(clean_name, clean_name)

@app.route('/')
def home():
    return "üçÖ –ú–æ–Ω–∏—Ç–æ—Ä—é 5 –≤–∏–¥–æ–≤ —Å–µ–º—è–Ω (15-–º–∏–Ω—É—Ç–Ω–æ–µ –æ–∫–Ω–æ)..."

def uptime_monitor():
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º"""
    while True:
        self_ping()
        time.sleep(600)

def discord_monitor():
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    logger.info("üîÑ –ú–û–ù–ò–¢–û–†–Æ 5 –°–ï–ú–Ø–ù: –¢–æ–º–∞—Ç, –ë–∞–º–±—É–∫, –í–µ–ª–∏–∫–∞—è –¢—ã–∫–≤–∞, –†–æ–º–∞–Ω–µ—Å–∫–æ, –ë–∞–≥—Ä–æ–≤–∞—è –ö–æ–ª—é—á–∫–∞")
    
    while True:
        try:
            found = check_discord_messages()
            
            if found:
                logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            else:
                logger.info("üîç –ù–æ–≤—ã—Ö —Å–µ–º—è–Ω –Ω–µ—Ç")
                
            cleanup_old_messages()
            time.sleep(10)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(30)

if __name__ == '__main__':
    logger.info("üöÄ –ó–ê–ü–£–°–ö –° –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú 5 –°–ï–ú–Ø–ù")
    
    threading.Thread(target=discord_monitor, daemon=True).start()
    threading.Thread(target=uptime_monitor, daemon=True).start()
    
    app.run(host='0.0.0.0', port=5000)
