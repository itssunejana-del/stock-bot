from flask import Flask
import requests
import os
import time
import logging
import threading

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
DISCORD_CHANNEL_ID = os.getenv('DISCORD_CHANNEL_ID')

# –•—Ä–∞–Ω–∏–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å Tomato
last_processed_message_id = None

def send_telegram(text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        response = requests.post(url, data=data, timeout=10)
        logger.info(f"üì± Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response.status_code}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
        return False

def check_discord_messages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —ç–º–±–∞–¥—ã –≤ –∫–∞–Ω–∞–ª–µ Discord"""
    global last_processed_message_id
    
    try:
        url = f"https://discord.com/api/v10/channels/{DISCORD_CHANNEL_ID}/messages?limit=5"  # –¢–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        headers = {"Authorization": f"Bot {DISCORD_TOKEN}"}
        
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            messages = response.json()
            
            # –ò—â–µ–º —Å–∞–º–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Tomato
            for message in messages:
                message_id = message['id']
                author = message['author']['username']
                content = message.get('content', '')
                embeds = message.get('embeds', [])
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏
                if message_id == last_processed_message_id:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–±–∞–¥—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Tomato
                for embed in embeds:
                    # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ —ç–º–±–∞–¥–∞
                    all_embed_text = ""
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —ç–º–±–∞–¥–∞
                    for field in embed.get('fields', []):
                        all_embed_text += f" {field.get('name', '')} {field.get('value', '')}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    all_embed_text += f" {embed.get('description', '')} {embed.get('title', '')}"
                    
                    # –ò—â–µ–º Tomato –≤ –ª—é–±–æ–º –≤–∏–¥–µ
                    if any(tomato_keyword in all_embed_text for tomato_keyword in ['Tomato', ':Tomato:', 'üçÖ']):
                        logger.info(f"üéØ –ù–û–í–´–ô TOMATO –ù–ê–ô–î–ï–ù –í –°–û–û–ë–©–ï–ù–ò–ò {message_id}!")
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
                        telegram_message = f"üö® TOMATO –í –ü–†–û–î–ê–ñ–ï! üçÖ\n\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —ç–º–±–∞–¥–∞
                        for field in embed.get('fields', []):
                            field_name = field.get('name', '')
                            field_value = field.get('value', '')
                            if field_name and field_value:
                                telegram_message += f"‚Ä¢ {field_name}: {field_value}\\n"
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        last_processed_message_id = message_id
                        
                        return True, telegram_message, message_id
            
            return False, "Tomato –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö", None
            
        else:
            return False, f"–û—à–∏–±–∫–∞ API: {response.status_code}", None
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}", None

@app.route('/')
def home():
    return """
    <h1>üçÖ Tomato Monitor Bot</h1>
    <p>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫–∞–Ω–∞–ª Discord!</p>
    <p>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <b id="lastMsg">–ó–∞–≥—Ä—É–∑–∫–∞...</b></p>
    <p><a href="/check">üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è</a></p>
    <p><a href="/reset">üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é</a></p>
    <script>
        fetch('/last_message').then(r => r.text()).then(msg => {
            document.getElementById('lastMsg').textContent = msg || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';
        });
    </script>
    """

@app.route('/check')
def check_messages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
    found, message, msg_id = check_discord_messages()
    
    result = "üçÖ TOMATO –ù–ê–ô–î–ï–ù!" if found else "‚ùå Tomato –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    return f"""
    <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</h1>
    <p>–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{result}</b></p>
    <p>ID —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_id or '–ù–µ—Ç'}</p>
    <p>–°–æ–æ–±—â–µ–Ω–∏–µ: {message}</p>
    <p><a href="/">‚Üê –ù–∞–∑–∞–¥</a></p>
    """

@app.route('/reset')
def reset_history():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global last_processed_message_id
    last_processed_message_id = None
    return """
    <h1>üîÑ –ò—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞!</h1>
    <p>–ë–æ—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.</p>
    <p><a href="/">‚Üê –ù–∞–∑–∞–¥</a></p>
    """

@app.route('/last_message')
def get_last_message():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    global last_processed_message_id
    return last_processed_message_id or "–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"

def discord_monitor():
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    logger.info("üîÑ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    
    while True:
        try:
            found, message, message_id = check_discord_messages()
            
            if found:
                logger.info(f"üéØ –û–¢–ü–†–ê–í–õ–Ø–Æ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –î–õ–Ø –°–û–û–ë–©–ï–ù–ò–Ø {message_id}!")
                success = send_telegram(message)
                if success:
                    logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram")
            else:
                logger.info("üîç Tomato –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
                
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(60)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if __name__ == '__main__':
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    monitor_thread = threading.Thread(target=discord_monitor)
    monitor_thread.daemon = True
    monitor_thread.start()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    send_telegram("üîç –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Tomato...")
    
    app.run(host='0.0.0.0', port=5000)
