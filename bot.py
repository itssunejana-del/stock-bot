from flask import Flask
import requests
import os
import time
import logging
import threading
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
DISCORD_CHANNEL_ID = os.getenv('DISCORD_CHANNEL_ID')

# –•—Ä–∞–Ω–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
last_processed_messages = set()
last_notification_time = None
MAX_PROCESSED_MESSAGES = 10  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π

def send_telegram(text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ö–û–†–û–¢–ö–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
        return False

def cleanup_old_messages():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏"""
    global last_processed_messages
    if len(last_processed_messages) > MAX_PROCESSED_MESSAGES:
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        last_processed_messages = set(list(last_processed_messages)[-5:])
        logger.info("üßπ –û—á–∏—Å—Ç–∏–ª —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

def check_discord_messages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global last_processed_messages, last_notification_time
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        url = f"https://discord.com/api/v10/channels/{DISCORD_CHANNEL_ID}/messages?limit=5"
        headers = {"Authorization": f"Bot {DISCORD_TOKEN}"}
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            messages = response.json()
            logger.info(f"üì® –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            found_seeds = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–æ–≤–æ–≥–æ –∫ —Å—Ç–∞—Ä–æ–º—É
            for message in messages:
                message_id = message['id']
                author = message['author']['username']
                
                logger.info(f"üìù –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç {author}")
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏
                if message_id in last_processed_messages:
                    logger.info(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞—é (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)")
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                last_processed_messages.add(message_id)
                logger.info(f"‚úÖ –î–æ–±–∞–≤–∏–ª –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ: {message_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–±–∞–¥—ã
                embeds = message.get('embeds', [])
                for embed in embeds:
                    all_embed_text = ""
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                    for field in embed.get('fields', []):
                        all_embed_text += f" {field.get('name', '')} {field.get('value', '')}"
                    
                    all_embed_text += f" {embed.get('description', '')} {embed.get('title', '')}"
                    
                    logger.info(f"üîç –¢–µ–∫—Å—Ç —ç–º–±–∞–¥–∞: {all_embed_text[:150]}...")
                    
                    # –ò—â–µ–º —Å–µ–º–µ–Ω–∞
                    seeds_to_monitor = [
                        'Tomato', 'Bamboo', 
                        'Great Pumpkin', 'Romanesco', 'Crimson Thorn'
                    ]
                    
                    for seed in seeds_to_monitor:
                        if seed in all_embed_text:
                            seed_display_name = {
                                'Tomato': '–¢–æ–º–∞—Ç',
                                'Bamboo': '–ë–∞–º–±—É–∫', 
                                'Great Pumpkin': '–í–µ–ª–∏–∫–∞—è –¢—ã–∫–≤–∞',
                                'Romanesco': '–†–æ–º–∞–Ω–µ—Å–∫–æ',
                                'Crimson Thorn': '–ë–∞–≥—Ä–æ–≤–∞—è –ö–æ–ª—é—á–∫–∞'
                            }.get(seed, seed)
                            
                            if seed_display_name not in found_seeds:
                                found_seeds.append(seed_display_name)
                                logger.info(f"üéØ –ù–ê–ô–î–ï–ù–û: {seed_display_name}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ–º—è–Ω
            if found_seeds:
                current_time = datetime.now()
                
                # –ö—É–ª–¥–∞—É–Ω 4.5 –º–∏–Ω—É—Ç—ã
                if last_notification_time:
                    time_passed = current_time - last_notification_time
                    if time_passed.total_seconds() < 270:
                        logger.info("‚è≥ –ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                        return False
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–µ–º–µ–Ω–∏
                for seed in found_seeds:
                    send_telegram(f"{seed} –≤ —Å—Ç–æ–∫–µ")
                
                last_notification_time = current_time
                return True
            
            logger.info("üîç –°–µ–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
            return False
            
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Discord API: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞: {e}")
        return False

@app.route('/')
def home():
    return "üçÖ –ú–æ–Ω–∏—Ç–æ—Ä—é 5 —Å–µ–º—è–Ω (5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)..."

def discord_monitor():
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    logger.info("üîÑ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê 5 –°–û–û–ë–©–ï–ù–ò–ô")
    
    while True:
        try:
            found = check_discord_messages()
            
            if found:
                logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            else:
                logger.info("üîç –ù–æ–≤—ã—Ö —Å–µ–º—è–Ω –Ω–µ—Ç")
                
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            cleanup_old_messages()
                
            time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(30)

if __name__ == '__main__':
    logger.info("üöÄ –ó–ê–ü–£–°–ö –° –ü–†–û–í–ï–†–ö–û–ô 5 –°–û–û–ë–©–ï–ù–ò–ô")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor_thread = threading.Thread(target=discord_monitor)
    monitor_thread.daemon = True
    monitor_thread.start()
    
    app.run(host='0.0.0.0', port=5000)
