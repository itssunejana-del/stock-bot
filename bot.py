from flask import Flask
import requests
import os
import time
import logging
import threading
import sys

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
DISCORD_CHANNEL_ID = os.getenv('DISCORD_CHANNEL_ID')

def test_discord_connection():
    """–¢–ï–°–¢–ò–†–£–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö DISCORD"""
    try:
        logger.info("üöÄ –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö DISCORD")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
        url = "https://discord.com/api/v10/users/@me"
        headers = {"Authorization": f"Bot {DISCORD_TOKEN}"}
        
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            bot_data = response.json()
            logger.info(f"‚úÖ –ë–û–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù: {bot_data['username']}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            url_channel = f"https://discord.com/api/v10/channels/{DISCORD_CHANNEL_ID}/messages?limit=5"
            response_channel = requests.get(url_channel, headers=headers, timeout=10)
            
            if response_channel.status_code == 200:
                messages = response_channel.json()
                logger.info(f"‚úÖ –î–û–°–¢–£–ü –ö –ö–ê–ù–ê–õ–£: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                return True, f"–ë–æ—Ç {bot_data['username']} –ø–æ–¥–∫–ª—é—á–µ–Ω. –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π"
            else:
                logger.error(f"‚ùå –ù–ï–¢ –î–û–°–¢–£–ü–ê –ö –ö–ê–ù–ê–õ–£: {response_channel.status_code}")
                return False, f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {response_channel.status_code}"
        else:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø: {response.status_code}")
            return False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}"
            
    except Exception as e:
        logger.error(f"üí• –û–®–ò–ë–ö–ê: {e}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

def send_telegram(text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        response = requests.post(url, data=data, timeout=10)
        logger.info(f"üì± Telegram: {response.status_code}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")

def check_discord_messages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ Discord"""
    try:
        url = f"https://discord.com/api/v10/channels/{DISCORD_CHANNEL_ID}/messages?limit=50"
        headers = {"Authorization": f"Bot {DISCORD_TOKEN}"}
        
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            messages = response.json()
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ò—â–µ–º Tomato –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            for message in messages:
                content = message.get('content', '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                if 'Tomato' in content or ':Tomato:' in content:
                    logger.info("üçÖ TOMATO –ù–ê–ô–î–ï–ù –í –¢–ï–ö–°–¢–ï!")
                    return True, content
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–±–∞–¥—ã
                for embed in message.get('embeds', []):
                    embed_text = str(embed.get('description', '')) + str(embed.get('title', ''))
                    if 'Tomato' in embed_text:
                        logger.info("üçÖ TOMATO –ù–ê–ô–î–ï–ù –í –≠–ú–ë–ê–î–ï!")
                        return True, embed_text
            
            return False, "Tomato –Ω–µ –Ω–∞–π–¥–µ–Ω"
        else:
            return False, f"–û—à–∏–±–∫–∞ API: {response.status_code}"
            
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

@app.route('/')
def home():
    return """
    <h1>üçÖ Tomato Monitor Bot</h1>
    <p>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫–∞–Ω–∞–ª Discord!</p>
    <p><a href="/test">üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</a></p>
    <p><a href="/status">üìä –°—Ç–∞—Ç—É—Å</a></p>
    <p><a href="/check">üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è</a></p>
    """

@app.route('/test')
def test_connection():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    logger.info("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
    success, message = test_discord_connection()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram
    status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
    send_telegram(f"{status}: {message}")
    
    return f"""
    <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h1>
    <p>–°—Ç–∞—Ç—É—Å: <b>{status}</b></p>
    <p>–°–æ–æ–±—â–µ–Ω–∏–µ: {message}</p>
    <p><a href="/">‚Üê –ù–∞–∑–∞–¥</a></p>
    """

@app.route('/status')
def status():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    success, message = test_discord_connection()
    return f"""
    <h1>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h1>
    <p>Discord: <b>{'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' if success else '‚ùå –û—à–∏–±–∫–∞'}</b></p>
    <p>–°–æ–æ–±—â–µ–Ω–∏–µ: {message}</p>
    <p>Telegram: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω</p>
    <p><a href="/">‚Üê –ù–∞–∑–∞–¥</a></p>
    """

@app.route('/check')
def check_messages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Tomato"""
    logger.info("üîç –ü–†–û–í–ï–†–ö–ê –°–û–û–ë–©–ï–ù–ò–ô")
    found, message = check_discord_messages()
    
    result = "üçÖ TOMATO –ù–ê–ô–î–ï–ù!" if found else "‚ùå Tomato –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    if found:
        send_telegram(f"üö® –¢–ï–°–¢: {result}")
        send_telegram(f"üìã {message[:200]}...")
    
    return f"""
    <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</h1>
    <p>–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{result}</b></p>
    <p>–°–æ–æ–±—â–µ–Ω–∏–µ: {message[:500] if found else message}</p>
    <p><a href="/">‚Üê –ù–∞–∑–∞–¥</a></p>
    """

def discord_monitor():
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    logger.info("üîÑ –ó–ê–ü–£–°–ö –û–°–ù–û–í–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    
    last_detected = False
    
    while True:
        try:
            found, message = check_discord_messages()
            
            if found and not last_detected:
                logger.info("üéØ TOMATO –û–ë–ù–ê–†–£–ñ–ï–ù - –û–¢–ü–†–ê–í–õ–Ø–Æ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!")
                send_telegram("üö® TOMATO –í –ü–†–û–î–ê–ñ–ï! üçÖ")
                send_telegram(f"üìã {message}")
                last_detected = True
            elif not found:
                last_detected = False
                
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(60)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if __name__ == '__main__':
    logger.info("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    monitor_thread = threading.Thread(target=discord_monitor)
    monitor_thread.daemon = True
    monitor_thread.start()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    send_telegram("üîç –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Tomato...")
    
    app.run(host='0.0.0.0', port=5000)
