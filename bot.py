from flask import Flask
import requests
import os
import time
import logging
import threading
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
DISCORD_CHANNEL_ID = os.getenv('DISCORD_CHANNEL_ID')

# –•—Ä–∞–Ω–∏–º –í–†–ï–ú–Ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
last_message_time = None
processed_messages = set()

def send_telegram(text):
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        return False
        
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")
            return True
        else:
            return False
    except:
        return False

def get_full_message_text(message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –í–ï–°–¨ —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    full_text = message.get('content', '')
    
    embeds = message.get('embeds', [])
    for embed in embeds:
        full_text += f" {embed.get('title', '')}"
        full_text += f" {embed.get('description', '')}"
        full_text += f" {embed.get('footer', {}).get('text', '')}"
        
        for field in embed.get('fields', []):
            full_text += f" {field.get('name', '')}"
            full_text += f" {field.get('value', '')}"
    
    return full_text

def get_message_time(message):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    timestamp = message['timestamp'].replace('Z', '+00:00')
    return datetime.fromisoformat(timestamp)

def check_discord_messages():
    global last_message_time
    
    try:
        url = f"https://discord.com/api/v10/channels/{DISCORD_CHANNEL_ID}/messages?limit=5"  # –¢–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        headers = {"Authorization": f"Bot {DISCORD_TOKEN}"}
        
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            messages = response.json()
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            for message in messages:
                message_id = message['id']
                author = message.get('author', {}).get('username', 'Unknown')
                
                # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –í—É–ª–∫–∞–Ω–∞
                if 'Vulcan' not in author:
                    continue
                
                message_time = get_message_time(message)
                full_text = get_full_message_text(message)
                
                logger.info(f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: {full_text[:80]}...")
                
                # üî¥ –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –°–í–ï–ñ–ò–ï —Å–æ–æ–±—â–µ–Ω–∏—è
                if last_message_time and message_time <= last_message_time:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                last_message_time = message_time
                
                # üî¥ –ò–©–ï–ú –¢–û–ú–ê–¢ –¢–û–õ–¨–ö–û –í –ù–û–í–´–• –°–û–û–ë–©–ï–ù–ò–Ø–•
                if 'Tomato' in full_text or 'To...' in full_text:
                    logger.info("üéØ –û–ë–ù–ê–†–£–ñ–ï–ù –¢–û–ú–ê–¢! –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Telegram...")
                    send_telegram("üçÖ –¢–æ–º–∞—Ç –≤ —Å—Ç–æ–∫–µ!")
                    return True
            
            return False
        else:
            return False
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞: {e}")
        return False

def monitoring_loop():
    logger.info("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω (–∏—â–µ–º —Ç–æ–º–∞—Ç—ã –≤ –ù–û–í–´–• —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)")
    
    while True:
        try:
            check_discord_messages()
            time.sleep(10)
        except:
            time.sleep(30)

@app.route('/')
def home():
    return """
    <h1>üçÖ –£–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–º–∞—Ç–æ–≤</h1>
    <p>–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –ù–û–í–´–ï —Å–æ–æ–±—â–µ–Ω–∏—è –í—É–ª–∫–∞–Ω–∞</p>
    <p>–ù–µ —Å–ø–∞–º–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–æ–∫–∞—Ö</p>
    <p><a href="/test_telegram">–¢–µ—Å—Ç Telegram</a></p>
    """

@app.route('/test_telegram')
def test_telegram():
    success = send_telegram("‚úÖ –£–º–Ω—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ñ–¥—É –Ω–æ–≤—ã–µ —Ç–æ–º–∞—Ç—ã.")
    return f"–¢–µ—Å—Ç: {'‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}"

@app.route('/reset')
def reset():
    global last_message_time
    last_message_time = None
    return "‚úÖ –°–±—Ä–æ—à–µ–Ω–æ! –ë—É–¥—É —Å—á–∏—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤—ã–º."

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
threading.Thread(target=monitoring_loop, daemon=True).start()

if __name__ == '__main__':
    logger.info("üöÄ –£–ú–ù–´–ô –ë–û–¢ –ó–ê–ü–£–©–ï–ù - –∂–¥—É –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–º–∞—Ç–∞–º–∏!")
    app.run(host='0.0.0.0', port=5000)
