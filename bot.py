from flask import Flask
import requests
import os
import time
import logging
import threading
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
DISCORD_CHANNEL_ID = os.getenv('DISCORD_CHANNEL_ID')

# –ü—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
last_processed_message_id = None
last_notification_time = None

def send_telegram(text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ö–û–†–û–¢–ö–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
        return False

def check_discord_messages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ"""
    global last_processed_message_id, last_notification_time
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ 1 –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        url = f"https://discord.com/api/v10/channels/{DISCORD_CHANNEL_ID}/messages?limit=1"
        headers = {"Authorization": f"Bot {DISCORD_TOKEN}"}
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–Ω–∞–ª {DISCORD_CHANNEL_ID}...")
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            messages = response.json()
            
            if not messages:
                return False, "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π", None
            
            message = messages[0]
            message_id = message['id']
            author = message['author']['username']
            
            logger.info(f"üì® –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {author}: {message_id}")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏
            if message_id == last_processed_message_id:
                return False, "–£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", message_id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–±–∞–¥—ã
            embeds = message.get('embeds', [])
            for embed in embeds:
                all_embed_text = ""
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                for field in embed.get('fields', []):
                    all_embed_text += f" {field.get('name', '')} {field.get('value', '')}"
                
                all_embed_text += f" {embed.get('description', '')} {embed.get('title', '')}"
                
                logger.info(f"üîç –¢–µ–∫—Å—Ç —ç–º–±–∞–¥–∞: {all_embed_text[:100]}...")
                
                # –ò—â–µ–º —Å–µ–º–µ–Ω–∞
                seeds_to_monitor = [
                    'Tomato', 'Bamboo', 
                    'Great Pumpkin', 'Romanesco', 'Crimson Thorn'
                ]
                
                found_seeds = []
                for seed in seeds_to_monitor:
                    if seed in all_embed_text:
                        found_seeds.append(seed)
                        logger.info(f"üéØ –ù–ê–ô–î–ï–ù–û: {seed}")
                
                if found_seeds:
                    current_time = datetime.now()
                    
                    # –ö—É–ª–¥–∞—É–Ω 4.5 –º–∏–Ω—É—Ç—ã
                    if last_notification_time:
                        time_passed = current_time - last_notification_time
                        if time_passed.total_seconds() < 270:
                            logger.info("‚è≥ –ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω")
                            last_processed_message_id = message_id
                            return False, "–ö—É–ª–¥–∞—É–Ω", message_id
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–µ–º–µ–Ω–∏
                    seed_name = found_seeds[0]
                    seed_display_name = {
                        'Tomato': '–¢–æ–º–∞—Ç',
                        'Bamboo': '–ë–∞–º–±—É–∫', 
                        'Great Pumpkin': '–í–µ–ª–∏–∫–∞—è –¢—ã–∫–≤–∞',
                        'Romanesco': '–†–æ–º–∞–Ω–µ—Å–∫–æ',
                        'Crimson Thorn': '–ë–∞–≥—Ä–æ–≤–∞—è –ö–æ–ª—é—á–∫–∞'
                    }.get(seed_name, seed_name)
                    
                    last_notification_time = current_time
                    last_processed_message_id = message_id
                    
                    return True, f"{seed_display_name} –≤ —Å—Ç–æ–∫–µ", message_id
            
            last_processed_message_id = message_id
            return False, "–°–µ–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", message_id
            
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Discord API: {response.status_code}")
            return False, f"API –æ—à–∏–±–∫–∞: {response.status_code}", None
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞: {e}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}", None

@app.route('/')
def home():
    return "üçÖ –ú–æ–Ω–∏—Ç–æ—Ä—é 5 —Å–µ–º—è–Ω: –¢–æ–º–∞—Ç, –ë–∞–º–±—É–∫, –í–µ–ª–∏–∫–∞—è –¢—ã–∫–≤–∞, –†–æ–º–∞–Ω–µ—Å–∫–æ, –ë–∞–≥—Ä–æ–≤–∞—è –ö–æ–ª—é—á–∫–∞"

def discord_monitor():
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    logger.info("üîÑ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê 5 –°–ï–ú–Ø–ù")
    
    while True:
        try:
            found, message, message_id = check_discord_messages()
            
            if found:
                logger.info(f"üéØ –û–¢–ü–†–ê–í–õ–Ø–Æ: {message}")
                success = send_telegram(message)
                if success:
                    logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            else:
                logger.info(f"üîç {message}")
                
            time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(30)

if __name__ == '__main__':
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–°–¢–û–ô –°–ò–°–¢–ï–ú–´")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor_thread = threading.Thread(target=discord_monitor)
    monitor_thread.daemon = True
    monitor_thread.start()
    
    app.run(host='0.0.0.0', port=5000)
