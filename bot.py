from flask import Flask
import requests
import os
import time
import logging
import threading
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
DISCORD_CHANNEL_ID = os.getenv('DISCORD_CHANNEL_ID')

# –•—Ä–∞–Ω–∏–º –í–°–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
processed_messages = set()

def send_telegram(text):
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        return False
        
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
        return False

def get_full_message_text(message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –í–ï–°–¨ —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    full_text = message.get('content', '')
    
    embeds = message.get('embeds', [])
    for embed in embeds:
        full_text += f" {embed.get('title', '')}"
        full_text += f" {embed.get('description', '')}"
        full_text += f" {embed.get('footer', {}).get('text', '')}"
        
        for field in embed.get('fields', []):
            full_text += f" {field.get('name', '')}"
            full_text += f" {field.get('value', '')}"
    
    return full_text

def check_discord_messages():
    global processed_messages
    
    try:
        url = f"https://discord.com/api/v10/channels/{DISCORD_CHANNEL_ID}/messages?limit=20"
        headers = {"Authorization": f"Bot {DISCORD_TOKEN}"}
        
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            messages = response.json()
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            found_tomato = False
            new_messages_count = 0
            
            for message in messages:
                message_id = message['id']
                author = message.get('author', {}).get('username', 'Unknown')
                
                # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –í—É–ª–∫–∞–Ω–∞
                if 'Vulcan' not in author:
                    continue
                
                full_text = get_full_message_text(message)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤–æ–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message_id in processed_messages:
                    continue  # –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏
                
                new_messages_count += 1
                processed_messages.add(message_id)
                
                logger.info(f"üÜï –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {full_text[:100]}...")
                
                # –ò—â–µ–º –¢–û–ú–ê–¢
                if 'Tomato' in full_text or 'To...' in full_text:
                    logger.info("üéØ –û–ë–ù–ê–†–£–ñ–ï–ù –¢–û–ú–ê–¢ –í –ù–û–í–û–ú –°–û–û–ë–©–ï–ù–ò–ò!")
                    send_telegram("üçÖ –¢–æ–º–∞—Ç –≤ —Å—Ç–æ–∫–µ!")
                    found_tomato = True
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {new_messages_count} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200)
            if len(processed_messages) > 200:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫, –≤–æ–∑—å–º–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100, –∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ set
                all_messages = list(processed_messages)
                processed_messages = set(all_messages[-100:])
                logger.info("üßπ –û—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            return found_tomato
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Discord: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞: {e}")
        return False

def monitoring_loop():
    logger.info("üîÑ –ó–ê–ü–£–°–ö –ü–†–û–°–¢–û–ì–û –ò –ù–ê–î–ï–ñ–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    
    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    global processed_messages
    try:
        url = f"https://discord.com/api/v10/channels/{DISCORD_CHANNEL_ID}/messages?limit=50"
        headers = {"Authorization": f"Bot {DISCORD_TOKEN}"}
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            messages = response.json()
            for message in messages:
                if 'Vulcan' in message.get('author', {}).get('username', ''):
                    processed_messages.add(message['id'])
            logger.info(f"üìù –ó–∞–ø–æ–º–Ω–∏–ª {len(processed_messages)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    
    while True:
        try:
            found = check_discord_messages()
            if found:
                logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.info("üîç –ù–æ–≤—ã—Ö —Ç–æ–º–∞—Ç–æ–≤ –Ω–µ—Ç")
            
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
            time.sleep(60)

@app.route('/')
def home():
    return """
    <h1>üçÖ –ü–†–û–°–¢–û–ô –ò –ù–ê–î–ï–ñ–ù–´–ô –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h1>
    <p>–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –í–°–ï –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –í—É–ª–∫–∞–Ω–∞</p>
    <p>–ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å—Ç–æ–∫–∏ –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π</p>
    <p>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {}</p>
    <p><a href="/test">–¢–µ—Å—Ç —Å–µ–π—á–∞—Å</a> | <a href="/reset">–°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë</a></p>
    """.format(len(processed_messages))

@app.route('/test')
def test():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"""
    result = check_discord_messages()
    return f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {'üéØ –¢–æ–º–∞—Ç –Ω–∞–π–¥–µ–Ω!' if result else 'üîç –¢–æ–º–∞—Ç–æ–≤ –Ω–µ—Ç'}"

@app.route('/reset')
def reset():
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å"""
    global processed_messages
    processed_messages = set()
    logger.info("üîÑ –ü–û–õ–ù–´–ô –°–ë–†–û–°! –ë—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –Ω–æ–≤—ã–µ.")
    return "‚úÖ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å! –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –Ω–æ–≤—ã–µ."

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
threading.Thread(target=monitoring_loop, daemon=True).start()

if __name__ == '__main__':
    logger.info("üöÄ –ü–†–û–°–¢–û–ô –ò –ù–ê–î–ï–ñ–ù–´–ô –ë–û–¢ –ó–ê–ü–£–©–ï–ù!")
    app.run(host='0.0.0.0', port=5000)
